{"name":"Lua-Objective-C bridge","body":"Lua-Objective-C Bridge\r\n======================\r\n\r\nObjective-C API\r\n---------------\r\n\r\n    lua_State *L = [[LuaBridge instance] L];\r\n\r\nGets lua_State object.\r\n\r\n    - (void)op_your_operator:(NSMutableArray*)stack\r\n\r\nDefine your operator.\r\n\r\n\r\nLua API\r\n-------\r\n\r\n### newstack\r\n\r\n    stack = objc.newstack()\r\n\r\nReturns a new stack to pass and receive paramters between Lua and Objective-C.\r\n\r\n### push\r\n\r\n    objc.push(stack, arg, ...)\r\n\r\nPushes one or more arguments to the stack.\r\n\r\n### pop\r\n\r\n    val = objc.pop(stack)\r\n\r\nPops the last (top) value from the stack.\r\n\r\n### operate\r\n\r\n    objc.operate(stack, \"operator_name\")\r\n\r\nCalls given operator with the content of the stack.\r\n\r\n\r\nPre-defined Operators\r\n---------------------\r\n\r\n### call\r\n\r\n    objc.push(stack, target, selector, arg, ...)\r\n    objc.operate(stack, \"call\")\r\n    local ret = objc.pop(stack)\r\n\r\n\"call\" operator sends a method specified by selector to the target, then pushes the returned object.\r\nThis is equivalent to following Objective-C expression:\r\n\r\n    ret = [target selector arg ...]\r\n\r\n\r\nAdding Operators\r\n----------------\r\n\r\nCreate a category on the LuaBrige class and implement your operators in folloing signature:\r\n\r\n    - (void)op_your_operator:(NSMutableArray*)stack\r\n\r\nThen from Lua script call the operator like this:\r\n\r\n    objc.operate(stack, \"your_operator\")\r\n\r\nNote that in Objective-C, the method name should be \"op_*your_operator*:\".\r\n","tagline":"Bridge between Lua and Objective-C which allows you to call a Objective-C method from a Lua script using NSInvocation.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}